# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BCfQ8oRsP91vdh4U010ra3ifmr1M-ARU
"""

!pip install -q streamlit
import streamlit as st
import pandas as pd
import joblib  # For loading the trained model

# Load model and dataset
model = joblib.load("trained_model.pkl")  # Load your saved model
df = pd.read_excel("dummy_npi_data.xlsx")

!pip install scikit-learn
from sklearn.preprocessing import LabelEncoder

# Initialize encoder
encoder = LabelEncoder()

df['Region_Encoded'] = encoder.fit_transform(df['Region'])
df['State_Encoded'] = encoder.fit_transform(df['State'])
df['Speciality_Encoded'] = encoder.fit_transform(df['Speciality'])

# Time Conversion Function
def convert_to_interval(time_str):
    """Converts 24-hour time (e.g., '18:30') to the nearest 15-minute interval."""
    try:
        hours, minutes = map(int, time_str.split(':'))
        total_minutes = hours * 60 + minutes
        return total_minutes
    except ValueError:
        st.error("Invalid time format. Please enter time in 'HH:MM' format.")
        return None

# Streamlit UI Design
st.title("Doctor Survey Prediction App")
st.write("Enter a time in **24-hour format** to predict which doctors are likely to attend.")

# Time Input Field
time_input = st.text_input("Enter Time (HH:MM)", "18:30")

# Predict Button
if st.button("Predict"):
    selected_interval = convert_to_interval(time_input)

    if selected_interval is not None:
        # Adding the input to test dataframe
        Interval = [selected_interval]*1000
        df['Interval of Interest'] = Interval

        # Predict for each doctor
        targeted_doctors = []
        test_data = df[['NPI', 'State_Encoded', 'Region_Encoded', 'Speciality_Encoded', 'Count of Survey Attempts', 'Interval of Interest']]

        # Prediction Logic
        targeted_doctors = []
        for _, record in df.iterrows():
            # Extract relevant features for prediction
            feature_data = record[['NPI', 'State_Encoded', 'Region_Encoded',
                                   'Speciality_Encoded', 'Count of Survey Attempts', 'Interval of Interest']].values
            prediction = model.predict([feature_data])[0]

            if prediction == 1:
                targeted_doctors.append(record['NPI'])

        # Display Results
        if targeted_doctors:
            result_df = pd.DataFrame({'NPI': targeted_doctors})
            st.success(f"**{len(targeted_doctors)} doctors** are likely to attend.")
            st.dataframe(result_df)

            # CSV Download Button
            csv = result_df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="Download CSV",
                data=csv,
                file_name='targeted_doctors.csv',
                mime='text/csv',
            )
        else:
            st.warning("No doctors are predicted to attend at this time.")